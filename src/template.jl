using ArgParse
using HTTP

#=------------------------------------------------------------------------------ 
| ArgParse Settings 
------------------------------------------------------------------------------=#

settings = ArgParseSettings()

@add_arg_table! settings begin
    "--year", "-y"
    help = "Year to generate template for"
    arg_type = Int
    default = 0
end

@add_arg_table! settings begin
    "--day", "-d"
    help = "Day to generate template for"
    arg_type = Int
    default = 0
end

parsed_args = parse_args(settings)
year = parsed_args["year"]
day  = parsed_args["day"]


#=------------------------------------------------------------------------------ 
| Generate Templated Puzzle Folder
------------------------------------------------------------------------------=#

yearname = "Year" * "$year"
dayname  = "Day" * lpad(day, 2, "0")
puzzlepath  = joinpath(@__DIR__, yearname, dayname)

# Don't try to create the template if a puzzle directory already exists
isdir(puzzlepath) && error("$puzzlepath already exists!")
mkpath(puzzlepath)


modpath    = joinpath(puzzlepath, dayname * ".jl")
ingestpath = joinpath(puzzlepath, "ingest.jl")
part1path  = joinpath(puzzlepath, "part01.jl")
part2path  = joinpath(puzzlepath, "part02.jl")

# Write the module file
println("Writing module file...")
open(modpath, create = true, write = true) do f
    contents = """
    module $dayname
    using AdventOfCode: getinput
    
    include("ingest.jl")
    include("part01.jl")
    include("part02.jl")
    
    export run
    function run()
        inpath  = getinput($year, $day, "input")
        input   = ingest(inpath)
        answer1 = part1(input)
        answer2 = part2(input)
    
        println("\\n    Day $(lpad(day, 2, "0"))")
        println("    ├─ Part 01: \$(answer1)")
        println("    └─ Part 02: \$(answer2)")
    end
    
    end # module
    """
    write(f, contents)
end

# Write the ingest script file
println("Writing ingest script file...")
open(ingestpath; create = true, write = true) do f
    contents = """
    # Generated by `template.jl`
    function ingest(path)
        output = []
        open(path) do f
            for line in eachline(f)
                push!(output, line)
            end
        end
        return output
    end
    """
    write(f, contents)
end

# Write the Part 1 script filemodule
println("Writing part 1 script file...")
open(part1path; create = true, write = true) do f
    contents = """
    # Generated by `template.jl`
    function part1(input)
        missing
    end
    """
    write(f, contents)
end

# Write the Part 2 script file
println("Writing part 2 script file...")
open(part2path; create = true, write = true) do f
    contents = """
    # Generated by `template.jl`
    function part2(input)
        missing
    end
    """
    write(f, contents)
end

# Fetch the input, if possible
println("Downloading input...")
cookie     = read("$(@__DIR__)/.cookie", String)
input_path = joinpath(@__DIR__, "..", "inputs", "$year", lpad(day, 2, "0"), "input.txt")
input_url  = "https://adventofcode.com/$year/day/$day/input"
headers    = Dict("cookie" => "session=$cookie")

try
    r = HTTP.request("GET", input_url, headers)
    touch(input_path)
    write(input_path, String(r.body))
catch e
    @warn "Could not download input, you'll have to do it manually."
    @warn e
end

println("All done. The template has been created at $puzzlepath")